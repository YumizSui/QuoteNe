{"version":3,"sources":["stores/slices/quoteSlice.ts","stores/store.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","pages/landing/Landing.tsx","features/TopBar.tsx","hooks/useTitle.ts","pages/app/App.tsx","pages/MainRoute.tsx","index.tsx"],"names":["quoteSlice","createSlice","name","initialState","quotes","reducers","store","configureStore","reducer","quote","quoteReducer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Landing","to","useStyles","makeStyles","theme","createStyles","menuButton","marginRight","spacing","title","cursor","links","borderBottomStyle","borderBottomWidth","appBar","zIndex","drawer","TopBar","menuButtonAction","classes","AppBar","position","className","Toolbar","style","display","justifyContent","flexDirection","alignItems","flexGrow","IconButton","edge","color","aria-label","Typography","variant","Tooltip","AccountCircle","useTitle","useState","undefined","pageName","setPageName","useEffect","document","newPageName","content","backgroundColor","minHeight","text","fontSize","userSelect","App","setTitle","CssBaseline","Slide","direction","in","timeout","MainRoute","muiTheme","createMuiTheme","palette","primary","light","main","dark","secondary","ThemeProvider","basename","process","exact","path","component","ReactDOM","render","StrictMode","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"iNA+BeA,EANWC,YAAY,CACpCC,KAAM,QACNC,aAT+B,CAC/BC,OAAQ,IASRC,SAAU,KAGZ,QC5BaC,EAAQC,YAAe,CAClCC,QAAS,CACPC,MAAOC,KCOLC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA2CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCnGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,sBCKCO,EAXC,kBACd,gCACE,0DACA,6BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,OAAT,gC,mHCMFC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,WAAY,CACVC,YAAaH,EAAMI,QAAQ,IAE7BC,MAAO,CACL,cAAe,OACf,UAAW,CACTC,OAAQ,YAGZC,MAAO,CACLJ,YAAaH,EAAMI,QAAQ,GAC3B,UAAW,CACTI,kBAAmB,QACnBC,kBAAmB,QAGvBC,OAAQ,CACNC,OAAQX,EAAMW,OAAOC,OAAS,QAsFrBC,EA9EuB,SAAC,GAAyB,EAAvBC,iBAAwB,IACzDC,EAAUjB,IAIhB,OACE,cAACkB,EAAA,EAAD,CAAQC,SAAS,QAAQC,UAAWH,EAAQL,OAA5C,SACE,eAACS,EAAA,EAAD,CAASC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAAnD,UACE,sBACEF,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,cAAe,MACfC,WAAY,SACZC,SAAU,GANd,UASE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLT,UAAWH,EAAQb,WACnB0B,MAAM,UACNC,aAAW,OAJb,SAOE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CACEC,QAAQ,KACRb,UAAWH,EAAQV,MAFrB,wBAQF,sBACEe,MAAO,CACLC,QAAS,OACTC,eAAgB,iBAHpB,UAQE,cAACQ,EAAA,EAAD,CACEC,QAAQ,QACRb,UAAWH,EAAQR,MAFrB,oBAOA,cAACuB,EAAA,EAAD,CACEC,QAAQ,QACRb,UAAWH,EAAQR,MAFrB,uBAQF,qBACEa,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBE,WAAY,UAJhB,SAOE,cAACQ,EAAA,EAAD,CAAS3B,MAAM,uBAAf,SACE,cAACqB,EAAA,EAAD,CACEE,MAAM,UADR,SAIE,cAACK,EAAA,EAAD,gB,QCjGCC,EAXE,WAAiD,IAAD,EAC/BC,wBAA6BC,GADE,mBACxDC,EADwD,KAC9CC,EAD8C,KAM/D,OAJAC,qBAAU,WACRC,SAASnC,WACM+B,IAAbC,EAAyB,UAAzB,UAAwCA,EAAxC,gBACD,CAACA,IACG,SAACI,GACFJ,IAAaI,GAAaH,EAAYG,KCIxC3C,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXyC,QAAS,CACPC,gBAAiB,UACjBC,UAAW,QACXvB,QAAS,OACTE,cAAe,SACfC,WAAY,SACZF,eAAgB,UAElBuB,KAAM,CACJC,SAAU,qBACVlB,MAAO,QACP,UAAW,CACTmB,WAAY,cA0BLC,EArBH,WACV,IAAMC,EAAWf,IACXnB,EAAUjB,IAEZO,OAA4B+B,EAIhC,OAHAG,qBAAU,WACRU,EAAS5C,KACR,CAAC4C,EAAU5C,IAEZ,sBAAKa,UAAU,MAAf,UACE,cAACgC,EAAA,EAAD,IACA,cAAC,EAAD,IACA,wBAAQhC,UAAWH,EAAQ2B,QAA3B,SACE,cAACS,EAAA,EAAD,CAAOC,UAAU,KAAKC,IAAI,EAAMC,QAAS,IAAzC,SACE,cAACxB,EAAA,EAAD,CAAYZ,UAAWH,EAAQ8B,KAA/B,kF,iBCdKU,EA3BG,WAChB,IAAMC,EAAWC,YAAe,CAC9BC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,WAERC,UAAW,CACTH,MAAO,UACPC,KAAM,UACNC,KAAM,cAIZ,OACE,cAACE,EAAA,EAAD,CAAehE,MAAOwD,EAAtB,SACE,cAAC,IAAD,CAAQS,SAAUC,WAAlB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzE,IACjC,cAAC,IAAD,CAAOuE,OAAK,EAACC,KAAK,OAAOC,UAAWrB,YChB9CsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUnH,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJmF,SAASiC,eAAe,SPYnB,SAAkBvG,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuG,IAAIR,WAAwBtG,OAAOC,SAAS8G,MACpDC,SAAWhH,OAAOC,SAAS+G,OAIvC,OAGFhH,OAAOiH,iBAAiB,QAAQ,WAC9B,IAAM5G,EAAK,UAAMiG,WAAN,sBAEPxG,IAgEV,SAAiCO,EAAeC,GAE9C4G,MAAM7G,EAAO,CACX8G,QAAS,CAAE,iBAAkB,YAE5BzG,MAAK,SAAC0G,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjH,UAAUC,cAAciH,MAAM/G,MAAK,SAACC,GAClCA,EAAa+G,aAAahH,MAAK,WAC7BV,OAAOC,SAAS0H,eAKpBvH,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyG,CAAwBvH,EAAOC,GAI/BC,UAAUC,cAAciH,MAAM/G,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OOlC/BuH,GAKArG,M","file":"static/js/main.cdf37530.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../store';\n\nexport interface Quote {\n  id: string;\n  title: string;\n  url: string;\n  contentType: string;\n  quoteBody?: string;\n  thumbnail?: string;\n  imgId?: string;\n  date: string;\n  tags: string[];\n}\ninterface QuoteState {\n  quotes: Quote[] | undefined;\n}\n\nconst initialState: QuoteState = {\n  quotes: [],\n};\n\nexport const selectQuotes = (state: RootState): Quote[] | undefined =>\n  state.quote.quotes;\n\nexport const quoteSlice = createSlice({\n  name: 'quote',\n  initialState,\n  reducers: {},\n});\n\nexport default quoteSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport quoteReducer from './slices/quoteSlice';\n\nexport const store = configureStore({\n  reducer: {\n    quote: quoteReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Landing = (): JSX.Element => (\n  <div>\n    <h1>置き場所</h1>\n    <ul>\n      <li>\n        <Link to=\"/app\">App (Main)</Link>\n      </li>\n    </ul>\n  </div>\n);\n\nexport default Landing;\n","import React from 'react';\nimport {\n  AppBar,\n  createStyles,\n  IconButton,\n  makeStyles,\n  Theme,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport { AccountCircle } from '@material-ui/icons';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      'user-select': 'none',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n    links: {\n      marginRight: theme.spacing(2),\n      '&:hover': {\n        borderBottomStyle: 'solid',\n        borderBottomWidth: '1px',\n      },\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n    },\n  })\n);\n\ninterface TopBarProps {\n  menuButtonAction?: () => void;\n}\nconst TopBar: React.FC<TopBarProps> = ({ menuButtonAction }) => {\n  const classes = useStyles();\n  // const { selectedGroup } = useGroups();\n  // const refresh = useRefreshment();\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'normal',\n            flexDirection: 'row',\n            alignItems: 'center',\n            flexGrow: 1,\n          }}\n        >\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            // onClick={menuButtonAction}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            // onClick={() => history.push('/app')}\n          >\n            QuoteNe\n          </Typography>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            // flexDirection: \"row\",\n            // alignItems: \"center\",\n          }}\n        >\n          <Typography\n            variant=\"body1\"\n            className={classes.links}\n            // onClick={() => history.push('/app')}\n          >\n            Mylist\n          </Typography>\n          <Typography\n            variant=\"body1\"\n            className={classes.links}\n            // onClick={() => history.push('/app')}\n          >\n            Active\n          </Typography>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'normal',\n            alignItems: 'center',\n          }}\n        >\n          <Tooltip title=\"Show Account Setting\">\n            <IconButton\n              color=\"inherit\"\n              // onClick={() => history.push('/app/myaccount')}\n            >\n              <AccountCircle />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default TopBar;\n","import { useEffect, useState } from 'react';\n\nconst useTitle = (): ((pageName: string | undefined) => void) => {\n  const [pageName, setPageName] = useState<string | undefined>(undefined);\n  useEffect(() => {\n    document.title =\n      pageName === undefined ? 'QuoteNe' : `${pageName} | QuoteNe`;\n  }, [pageName]);\n  return (newPageName) => {\n    if (pageName !== newPageName) setPageName(newPageName);\n  };\n};\n\nexport default useTitle;\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport {\n  CssBaseline,\n  createStyles,\n  makeStyles,\n  Theme,\n  Slide,\n  Typography,\n} from '@material-ui/core';\nimport TopBar from '../../features/TopBar';\nimport useTitle from '../../hooks/useTitle';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      backgroundColor: '#282c34',\n      minHeight: '100vh',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    text: {\n      fontSize: 'calc(10px + 5vmin)',\n      color: 'white',\n      '&:hover': {\n        userSelect: 'none',\n      },\n    },\n  })\n);\nconst App = (): JSX.Element => {\n  const setTitle = useTitle();\n  const classes = useStyles();\n\n  let title: string | undefined = undefined;\n  useEffect(() => {\n    setTitle(title);\n  }, [setTitle, title]);\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <TopBar />\n      <header className={classes.content}>\n        <Slide direction=\"up\" in={true} timeout={1000}>\n          <Typography className={classes.text}>素晴らしいコンテンツ</Typography>\n        </Slide>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Landing from './landing/Landing';\nimport App from './app/App';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\n\nconst MainRoute = (): JSX.Element => {\n  const muiTheme = createMuiTheme({\n    palette: {\n      primary: {\n        light: '#494b4f',\n        main: '#1c1e24',\n        dark: '#131519',\n      },\n      secondary: {\n        light: '#ef6694',\n        main: '#ec407a',\n        dark: '#a52c55',\n      },\n    },\n  });\n  return (\n    <ThemeProvider theme={muiTheme}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={Landing} />\n          <Route exact path=\"/app\" component={App} />\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n};\n\nexport default MainRoute;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { store } from './stores/store';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport MainRoute from './pages/MainRoute';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <MainRoute />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}